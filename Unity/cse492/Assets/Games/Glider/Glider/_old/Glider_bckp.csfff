using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Glider : MonoBehaviour {
    new Rigidbody rigidbody;

    public float air_pressure = 1.225f;

    public float stall_angle = 20;
    public float lift_coeff_offset = 0.4f;

    public float wing_chord = 1.0f;
    public float wing_span = 1.0f;

    private float wing_area;
    private float wing_ratio;

    public Vector3 initial_speed;

    private float drag = 0;

    // Start is called before the first frame update
    void Start() {
        rigidbody = gameObject.GetComponent<Rigidbody>();
        rigidbody.AddRelativeForce(initial_speed, ForceMode.VelocityChange);
        wing_area = wing_chord * wing_span;
        wing_ratio = wing_span / wing_chord;
    }

    // Update is called once per frame
    void FixedUpdate() {

        rigidbody.rotation = Quaternion.Lerp(rigidbody.rotation, Quaternion.LookRotation(rigidbody.velocity, transform.up), Time.deltaTime);
        rigidbody.AddRelativeTorque(Input.GetAxis("Pitch"), 0, 0);

        // LIFT and drag
        if (rigidbody.velocity.magnitude > 0) {            

            var angle_of_attack = Vector3.Angle(transform.forward, rigidbody.velocity.normalized);

            float gravity = rigidbody.mass * 9.81f * 0.2f;
            rigidbody.AddForce(0, -gravity, 0);

            float lift = get_lift_coeff(angle_of_attack) * air_pressure * Mathf.Pow(rigidbody.velocity.magnitude, 2.0f) * wing_area;
            rigidbody.AddForce(lift * transform.up * Time.deltaTime);

            float lift_drag = (lift * lift) / (.5f * air_pressure * Mathf.Pow(rigidbody.velocity.magnitude, 2) * wing_area * Mathf.PI * 0.9f * wing_ratio);
            var drag_coeff = get_drag_coeff(angle_of_attack);
            drag = 0.5f * air_pressure * Mathf.Pow(rigidbody.velocity.magnitude, 2.0f) * wing_area * get_drag_coeff(angle_of_attack);
            //drag += lift_drag;
            rigidbody.AddForce(drag * -rigidbody.velocity * Time.deltaTime);
        }
    }

    void OnGUI() {
        GUILayout.BeginArea(new Rect(5, 5, Screen.width - 5, Screen.width - 5));
        GUILayout.BeginVertical();
        GUILayout.Label("Vert speed = " + rigidbody.velocity.y);
        GUILayout.EndVertical();
        GUILayout.EndArea();
    }

    float get_lift_coeff(float angle_of_attack) {
        if (angle_of_attack >= stall_angle)
            return 0;
        else
            return lift_coeff_offset + 2 * Mathf.PI * angle_of_attack * Mathf.Deg2Rad;
    }

    float get_drag_coeff(float angle_of_attack) {
        //return 0.00039f * angle_of_attack * angle_of_attack + 0.025f;
        return 0.1f;
    }

}